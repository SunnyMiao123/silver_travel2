import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["stylish"];
import { css, cx } from '@emotion/css';
import { useMemo } from 'react';
import { useAntdToken, useTheme } from "../hooks";
import { useInternalStylish } from "../stylish";

/**
 * 业务应用中创建样式基础写法
 */
export function createStyles(cssStyleOrGetCssStyleFn) {
  return function (props) {
    var antdToken = useAntdToken();
    var internalStylish = useInternalStylish();
    var theme = useTheme();
    return useMemo(function () {
      var styles;

      if (typeof cssStyleOrGetCssStyleFn === 'function') {
        var stylish = theme.stylish,
            fullToken = _objectWithoutProperties(theme, _excluded); // @ts-ignore


        styles = cssStyleOrGetCssStyleFn({
          token: _objectSpread(_objectSpread({}, antdToken), fullToken),
          stylish: _objectSpread(_objectSpread({}, internalStylish), stylish)
        }, props);
      } else {
        // @ts-ignore
        styles = cssStyleOrGetCssStyleFn;
      }

      if (_typeof(styles) === 'object') {
        styles = Object.fromEntries(Object.entries(styles).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          if (_typeof(value) === 'object') {
            return [key, css(value)];
          }

          return [key, value];
        }));
      } // 处理


      return {
        styles: styles,
        cx: cx,
        theme: theme
      };
    }, [antdToken, theme, props]);
  };
}